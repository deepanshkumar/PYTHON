import requests
import pandas as pd
from datetime import datetime, timedelta

# Define your Cymulate API token and endpoints
API_TOKEN = 'your_cymulate_api_token'
HISTORY_API_URL = 'https://api.cymulate.com/v1/assessments/history'  # Update with the correct API endpoint
DETAILS_API_URL = 'https://api.cymulate.com/v1/assessments/details'  # Update with the correct API endpoint

# Function to fetch assessment IDs from history API within a date range
def fetch_assessment_ids(start_date, end_date):
    headers = {
        'Authorization': f'Bearer {API_TOKEN}',
        'Content-Type': 'application/json'
    }

    params = {
        'start_date': start_date,
        'end_date': end_date
    }

    response = requests.get(HISTORY_API_URL, headers=headers, params=params)
    if response.status_code != 200:
        print(f'Error fetching data: {response.status_code}')
        return []

    data = response.json()
    if 'data' not in data or 'attack' not in data['data']:
        print('No assessment data found in the response.')
        return []

    assessments = data['data']['attack']
    assessment_ids = [assessment['ID'] for assessment in assessments]
    return assessment_ids

# Function to fetch results for a specific assessment ID using another API
def fetch_assessment_details(assessment_id):
    headers = {
        'Authorization': f'Bearer {API_TOKEN}',
        'Content-Type': 'application/json'
    }

    response = requests.get(f'{DETAILS_API_URL}/{assessment_id}', headers=headers)
    if response.status_code != 200:
        print(f'Error fetching results for assessment ID {assessment_id}: {response.status_code}')
        return []

    data = response.json()
    if 'data' not in data or 'payloads' not in data['data']:
        print(f'No detailed data found for assessment ID {assessment_id}.')
        return []

    payloads = data['data']['payloads']
    results = []

    for payload in payloads:
        result = {
            'Assessment ID': assessment_id,
            'Name': payload.get('Name'),
            'Attack Payload': payload.get('Attack_Payload'),
            'Timestamp': payload.get('Timestamp'),
            'SHA-1': payload.get('Sha1'),
            'SHA-256': payload.get('Sha256'),
            'Attack Vector': payload.get('Attack_Vector'),
            'Endpoint Address': payload.get('Target')
        }
        results.append(result)

    return results

# Main function
def main(lookback_days):
    # Calculate the start and end dates based on the lookback period
    end_date = datetime.now()
    start_date = end_date - timedelta(days=lookback_days)
    
    # Format dates as strings
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')

    # Fetch assessment IDs within the date range
    assessment_ids = fetch_assessment_ids(start_date_str, end_date_str)

    all_results = []

    # Fetch details for each assessment ID
    for assessment_id in assessment_ids:
        results = fetch_assessment_details(assessment_id)
        all_results.extend(results)

    # Get the current timestamp
    current_time = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Convert results to DataFrame and save to CSV with timestamp in the file name
    df = pd.DataFrame(all_results)
    file_name = f'cymulate_assessment_details_{current_time}.csv'
    df.to_csv(file_name, index=False)

    print(f'Results have been saved to {file_name}')

if __name__ == '__main__':
    # Input the lookback period in days
    lookback_days = int(input("Enter the number of days to look back: "))
    
    main(lookback_days)
